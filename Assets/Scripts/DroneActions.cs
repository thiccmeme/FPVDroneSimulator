//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Scripts/DroneActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/DroneActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @DroneActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @DroneActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DroneActions"",
    ""maps"": [
        {
            ""name"": ""DroneOnGround"",
            ""id"": ""ea15fe53-ae70-4494-9f0a-141a3f35c5ba"",
            ""actions"": [
                {
                    ""name"": ""MoveDrone"",
                    ""type"": ""Value"",
                    ""id"": ""0b86bea8-d295-4f2b-a965-d6a2d5a70cb9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateDrone"",
                    ""type"": ""Value"",
                    ""id"": ""da7d08dc-4d8d-4a71-8bcd-34fe122eaa6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""PassThrough"",
                    ""id"": ""33fab0ef-9498-4818-8b23-f2be97ccb288"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2cf6a153-7f67-422c-953f-0665123bcecd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RollOff"",
                    ""type"": ""Button"",
                    ""id"": ""b34948f3-26b8-4e02-ad41-0576f89ea31f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollOn"",
                    ""type"": ""Button"",
                    ""id"": ""682a0915-f364-4ce1-bb03-88cbd3457580"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""48d7cc9e-1c94-4efa-a2fc-4669a4e290dd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ui"",
                    ""type"": ""Button"",
                    ""id"": ""43daaf89-a325-4df5-986a-6263ee12d0a3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Button"",
                    ""id"": ""ca2060f5-3302-46fe-9564-b4d4e0f46769"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""12900beb-99f4-43da-ab86-e7a8148dbc8c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""be0d381e-0e32-4aaf-bf15-57b86e123350"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDrone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c163acb-ce7e-4f94-a4b2-2e54720c51a8"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDrone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ea476bb-0cdc-47cc-a25a-5a4abba98c8c"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c228f99-7ee8-4df4-841b-b50eacdee734"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf61baf1-0a22-48f5-aa1d-47d1b4ed6ec3"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1c6723c-d9eb-42e4-9b7d-7471f8603fdd"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beef887e-eae0-484c-806a-2c11d2c7bc73"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0342ac8f-b9dd-43e9-b5da-5fc149ed2478"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ui"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d07b4a0a-c76f-4fd2-bd4a-f8ed8cb3b58f"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3fa5e6d-2087-40dd-865d-7ae9ee493466"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DroneOnGround
        m_DroneOnGround = asset.FindActionMap("DroneOnGround", throwIfNotFound: true);
        m_DroneOnGround_MoveDrone = m_DroneOnGround.FindAction("MoveDrone", throwIfNotFound: true);
        m_DroneOnGround_RotateDrone = m_DroneOnGround.FindAction("RotateDrone", throwIfNotFound: true);
        m_DroneOnGround_Up = m_DroneOnGround.FindAction("Up", throwIfNotFound: true);
        m_DroneOnGround_Down = m_DroneOnGround.FindAction("Down", throwIfNotFound: true);
        m_DroneOnGround_RollOff = m_DroneOnGround.FindAction("RollOff", throwIfNotFound: true);
        m_DroneOnGround_RollOn = m_DroneOnGround.FindAction("RollOn", throwIfNotFound: true);
        m_DroneOnGround_Drop = m_DroneOnGround.FindAction("Drop", throwIfNotFound: true);
        m_DroneOnGround_Ui = m_DroneOnGround.FindAction("Ui", throwIfNotFound: true);
        m_DroneOnGround_Pitch = m_DroneOnGround.FindAction("Pitch", throwIfNotFound: true);
        m_DroneOnGround_Back = m_DroneOnGround.FindAction("Back", throwIfNotFound: true);
    }

    ~@DroneActions()
    {
        UnityEngine.Debug.Assert(!m_DroneOnGround.enabled, "This will cause a leak and performance issues, DroneActions.DroneOnGround.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DroneOnGround
    private readonly InputActionMap m_DroneOnGround;
    private List<IDroneOnGroundActions> m_DroneOnGroundActionsCallbackInterfaces = new List<IDroneOnGroundActions>();
    private readonly InputAction m_DroneOnGround_MoveDrone;
    private readonly InputAction m_DroneOnGround_RotateDrone;
    private readonly InputAction m_DroneOnGround_Up;
    private readonly InputAction m_DroneOnGround_Down;
    private readonly InputAction m_DroneOnGround_RollOff;
    private readonly InputAction m_DroneOnGround_RollOn;
    private readonly InputAction m_DroneOnGround_Drop;
    private readonly InputAction m_DroneOnGround_Ui;
    private readonly InputAction m_DroneOnGround_Pitch;
    private readonly InputAction m_DroneOnGround_Back;
    /// <summary>
    /// Provides access to input actions defined in input action map "DroneOnGround".
    /// </summary>
    public struct DroneOnGroundActions
    {
        private @DroneActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DroneOnGroundActions(@DroneActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/MoveDrone".
        /// </summary>
        public InputAction @MoveDrone => m_Wrapper.m_DroneOnGround_MoveDrone;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/RotateDrone".
        /// </summary>
        public InputAction @RotateDrone => m_Wrapper.m_DroneOnGround_RotateDrone;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/Up".
        /// </summary>
        public InputAction @Up => m_Wrapper.m_DroneOnGround_Up;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/Down".
        /// </summary>
        public InputAction @Down => m_Wrapper.m_DroneOnGround_Down;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/RollOff".
        /// </summary>
        public InputAction @RollOff => m_Wrapper.m_DroneOnGround_RollOff;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/RollOn".
        /// </summary>
        public InputAction @RollOn => m_Wrapper.m_DroneOnGround_RollOn;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/Drop".
        /// </summary>
        public InputAction @Drop => m_Wrapper.m_DroneOnGround_Drop;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/Ui".
        /// </summary>
        public InputAction @Ui => m_Wrapper.m_DroneOnGround_Ui;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/Pitch".
        /// </summary>
        public InputAction @Pitch => m_Wrapper.m_DroneOnGround_Pitch;
        /// <summary>
        /// Provides access to the underlying input action "DroneOnGround/Back".
        /// </summary>
        public InputAction @Back => m_Wrapper.m_DroneOnGround_Back;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_DroneOnGround; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DroneOnGroundActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DroneOnGroundActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DroneOnGroundActions" />
        public void AddCallbacks(IDroneOnGroundActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneOnGroundActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneOnGroundActionsCallbackInterfaces.Add(instance);
            @MoveDrone.started += instance.OnMoveDrone;
            @MoveDrone.performed += instance.OnMoveDrone;
            @MoveDrone.canceled += instance.OnMoveDrone;
            @RotateDrone.started += instance.OnRotateDrone;
            @RotateDrone.performed += instance.OnRotateDrone;
            @RotateDrone.canceled += instance.OnRotateDrone;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @RollOff.started += instance.OnRollOff;
            @RollOff.performed += instance.OnRollOff;
            @RollOff.canceled += instance.OnRollOff;
            @RollOn.started += instance.OnRollOn;
            @RollOn.performed += instance.OnRollOn;
            @RollOn.canceled += instance.OnRollOn;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
            @Ui.started += instance.OnUi;
            @Ui.performed += instance.OnUi;
            @Ui.canceled += instance.OnUi;
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DroneOnGroundActions" />
        private void UnregisterCallbacks(IDroneOnGroundActions instance)
        {
            @MoveDrone.started -= instance.OnMoveDrone;
            @MoveDrone.performed -= instance.OnMoveDrone;
            @MoveDrone.canceled -= instance.OnMoveDrone;
            @RotateDrone.started -= instance.OnRotateDrone;
            @RotateDrone.performed -= instance.OnRotateDrone;
            @RotateDrone.canceled -= instance.OnRotateDrone;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @RollOff.started -= instance.OnRollOff;
            @RollOff.performed -= instance.OnRollOff;
            @RollOff.canceled -= instance.OnRollOff;
            @RollOn.started -= instance.OnRollOn;
            @RollOn.performed -= instance.OnRollOn;
            @RollOn.canceled -= instance.OnRollOn;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
            @Ui.started -= instance.OnUi;
            @Ui.performed -= instance.OnUi;
            @Ui.canceled -= instance.OnUi;
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DroneOnGroundActions.UnregisterCallbacks(IDroneOnGroundActions)" />.
        /// </summary>
        /// <seealso cref="DroneOnGroundActions.UnregisterCallbacks(IDroneOnGroundActions)" />
        public void RemoveCallbacks(IDroneOnGroundActions instance)
        {
            if (m_Wrapper.m_DroneOnGroundActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DroneOnGroundActions.AddCallbacks(IDroneOnGroundActions)" />
        /// <seealso cref="DroneOnGroundActions.RemoveCallbacks(IDroneOnGroundActions)" />
        /// <seealso cref="DroneOnGroundActions.UnregisterCallbacks(IDroneOnGroundActions)" />
        public void SetCallbacks(IDroneOnGroundActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneOnGroundActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneOnGroundActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DroneOnGroundActions" /> instance referencing this action map.
    /// </summary>
    public DroneOnGroundActions @DroneOnGround => new DroneOnGroundActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "DroneOnGround" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DroneOnGroundActions.AddCallbacks(IDroneOnGroundActions)" />
    /// <seealso cref="DroneOnGroundActions.RemoveCallbacks(IDroneOnGroundActions)" />
    public interface IDroneOnGroundActions
    {
        /// <summary>
        /// Method invoked when associated input action "MoveDrone" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDrone(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RotateDrone" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateDrone(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Up" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RollOff" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRollOff(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RollOn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRollOn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Drop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDrop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Ui" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUi(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pitch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPitch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Back" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBack(InputAction.CallbackContext context);
    }
}
